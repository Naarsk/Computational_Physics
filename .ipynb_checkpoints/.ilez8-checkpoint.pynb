{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Random numbers with gaussian distribution:\n",
    "Metropolis algorithm\n",
    "Here we use the Metropolis algorithm to generate points with the distribution\n",
    "P(x) = exp(-x^2/2s^2). We consider s = 1, but the suggestion\n",
    "is to write the code for a generic s."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(a) Start from x0=0 and choose d=5s to be the maximum displacement\n",
    "for each step. Execute runs with n=100, 1000, 10000, 100000 points,\n",
    "make an histogram of the points generated and compare it with the\n",
    "gaussian distribution. For which n the agreement is satisfactory?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def metropolis(p,x0,d,n):\n",
    "    x=[]\n",
    "    xi=x0\n",
    "    for i in range(n):\n",
    "        x.append(xi)\n",
    "        di=np.random.uniform(-d,d)\n",
    "        xt=xi+di\n",
    "        w=p(xt)/p(xi)\n",
    "        if w >= 1:\n",
    "            xi=xt\n",
    "        else:\n",
    "            r=np.random.uniform(0,1)\n",
    "            if w >= r:\n",
    "                xi=xt   \n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def p(x):\n",
    "    s=1\n",
    "    return np.exp(-x**2/(2*s**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "lst=metropolis(p,0,5,n)\n",
    "nbins=15\n",
    "n=10000\n",
    "\n",
    "#histogram\n",
    "plt.hist(lst, bins=nbins, range=(-4,4), density=True)\n",
    "#function\n",
    "x = np.linspace(-4,4,100)\n",
    "y = p(x)/np.sqrt(2*np.pi)\n",
    "plt.plot(x,y, 'r')\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Tenendo fissato a 16 il numero di bins in cui ho diviso l'intervallo [-4,4], \n",
    "#per n crescenti ho calcolato Sn, la somma in quadratura delle differenze \n",
    "#tra il valore dell'istogramma normalizzato in ogni bin e il valore teorico \n",
    "#della distribuzione (normalizzata) al centro del bin. Ho ripetuto per alcuni valori di n.\n",
    "nbins=16\n",
    "kmax=11\n",
    "n=512\n",
    "S=[]\n",
    "nlst=[]\n",
    "\n",
    "for k in range(kmax):\n",
    "    lst=metropolis(p,0,5,n)\n",
    "    hist, bin_edges = np.histogram(lst, bins=nbins, range=(-4,4), density=True)\n",
    "    bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2.\n",
    "    y=p(bin_centers)/np.sqrt(2*np.pi)\n",
    "    S.append(sum((hist-y)**2)/nbins)\n",
    "    nlst.append(n)\n",
    "    n=n*2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#loglog plot\n",
    "plt.plot(np.log2(nlst), np.log2(S))\n",
    "\n",
    "plt.xlabel('log n')\n",
    "plt.ylabel('log S')\n",
    "plt.title(str(nbins)+' bins')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#least squares fit\n",
    "import numpy as np\n",
    "\n",
    "def lsfit(x,y):\n",
    "    if len(x)== len(y):\n",
    "        n=len(x)\n",
    "    else:\n",
    "        print('error: array lenghts do not match')\n",
    "        \n",
    "    x=np.array(x)\n",
    "    y=np.array(y)\n",
    "    \n",
    "    xm=sum(x)/n\n",
    "    ym=sum(y)/n\n",
    "    \n",
    "    ssxx=sum(x**2)-n*xm**2\n",
    "    ssxy=sum(x*y)-n*xm*ym\n",
    "\n",
    "    m=ssxy/ssxx\n",
    "    q=ym-m*xm\n",
    "    \n",
    "    return(m,q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m,q=lsfit(np.log(nlst), np.log(S))\n",
    "\n",
    "print('m_unif=', m)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(b) Choose n which gives a satisfactory result. For s fixed, change the\n",
    "step size d (i.e., change the ratio d/s). Determine qualitatively the\n",
    "dependence of the acceptance ratio on d/s. Make a plot. How to\n",
    "choose d/s in order to accept from ⇡ 1/3 to ⇡ 1/2 of trial changes?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def na_metropolis(p,x0,d,n):\n",
    "    na=0\n",
    "    xi=x0\n",
    "    for i in range(n):\n",
    "        di=np.random.uniform(-d,d)\n",
    "        xt=xi+di\n",
    "        w=p(xt)/p(xi)\n",
    "        if w >= 1:\n",
    "            xi=xt\n",
    "        else:\n",
    "            r=np.random.uniform(0,1)\n",
    "            if w >= r:\n",
    "                xi=xt   \n",
    "                na=na+1\n",
    "    return na"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=10000\n",
    "dvalues=[10,5,2,1,0.5,0.2,0.1, 0.01]\n",
    "lst=[]\n",
    "\n",
    "for d in dvalues:\n",
    "    lst.append(na_metropolis(p,0,d,n)/n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(lst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#loglog plot\n",
    "plt.plot(dvalues,lst)\n",
    "\n",
    "plt.xlabel('d/s')\n",
    "plt.ylabel('n_a/n')\n",
    "plt.title('acceptance ratio')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(c) By varying n in a more refined way (e.g. from 100 to 10000 with steps\n",
    "of 100), compare the first moments of the distribution obtained numerically\n",
    "with the exact ones analytically calculated with the Gaussian.\n",
    "In particular, focus on the second moment and make a plot of\n",
    "the di↵erence “exact variance - numerical variance” as a function of\n",
    "n."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "nmax=2*10**4\n",
    "D=[]\n",
    "nlst=[]\n",
    "\n",
    "for n in range(100,nmax,100):\n",
    "    x=metropolis(p,0,5,n)\n",
    "    s=np.var(x,ddof=1)        #unbiased estimator\n",
    "    D.append(abs(s-1))\n",
    "    nlst.append(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#loglog plot\n",
    "plt.plot(nlst,D)\n",
    "\n",
    "plt.xlabel('n')\n",
    "plt.ylabel('Dn')\n",
    "plt.title('|exact variance - numerical variance|')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(d) For fixed s = 1 and d=5s, determine qualitatively the equilibration\n",
    "time (i.e. the number of steps necessary to equilibrate the system);\n",
    "a possible criterion is that the numerical estimate of <x^2>-< x>^2 is close enough to s^2, say within 5%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Sampling physical quantities: direct sampling and Metropolis sampling\n",
    "Consider the quantum harmonic oscillator and its ground state. The exact\n",
    "solution and the expectation values of kinetic, potential and total energy\n",
    "are know analitically, and can be used to compare the numerical results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(a) Direct sampling. Estimate kinetic energy, potential energy, first moments\n",
    "<x^i> of the wave function f(x) = Ae^(-x^2/4s^2) with a samplemean\n",
    "Monte Carlo calculation of the integral of the expectation values\n",
    "using a sequence of random points directly obtained for instance\n",
    "from the gasdev subroutine (see Lecture III).                                    Study the numerical accuracy and the convergence of the previous quantities as a function of the number of sampling points (since variance and kinetic, potential and total energy depend on the second moment <x^2>, you should find the same behavior for all these quantities, a part from a scaling factor)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def boxmuller(m,s):\n",
    "    v1,v2=np.random.uniform(0,1,2)\n",
    "    r=np.sqrt(-2*np.log(v1))\n",
    "    x=r*np.cos(2*np.pi*v2)*s+m\n",
    "    y=r*np.sin(2*np.pi*v2)*s+m\n",
    "    return x,y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "n=10000\n",
    "s=1\n",
    "x=0\n",
    "x2=0\n",
    "\n",
    "for i in range(int(n/2)):\n",
    "    a,b=boxmuller(0,s)\n",
    "    x=x+a+b\n",
    "    x2=x2+a**2+b**2\n",
    "    \n",
    "x=x/n\n",
    "x2=x2/n\n",
    "\n",
    "Epot=x2/2\n",
    "Ekin=1/(4*s**2)-x2/(8*s**4)\n",
    "print(Epot,Ekin)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(c) Metropolis sampling. Repeat the sampling using the Metropolis algorithm.\n",
    "See for instance the code metropolis sampling.f90. Evaluate\n",
    "the numerical accuracy and convergence of the more relevant\n",
    "quantities as a function of the number of sampling points. (see the\n",
    "comment in (a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=10000\n",
    "\n",
    "def p(x):\n",
    "    s=1\n",
    "    return np.exp(-x**2/(2*s**2))\n",
    "\n",
    "x=metropolis(p,0,5,n)\n",
    "Epot=sum(np.array(x)**2)/(2*n)\n",
    "Ekin=(2*s**2-sum(np.array(x)**2)/n)/(8*s**4)\n",
    "print(Epot,Ekin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "s=1\n",
    "kmax=11\n",
    "n=2**9\n",
    "Em=[]\n",
    "Ed=[]\n",
    "nlst=[]\n",
    "Etot=s**2/2+1/(8*s**2)\n",
    "for k in range(kmax):\n",
    "    #direct\n",
    "    for i in range(int(n/2)):\n",
    "        a,b=boxmuller(0,s)\n",
    "        x2=x2+a**2+b**2\n",
    "    x2=x2/n\n",
    "    Etotd=x2/2+1/(4*s**2)-x2/(8*s**4)\n",
    "    Ed.append(abs(Etotd-Etot))\n",
    "    #metropolis\n",
    "    x=metropolis(p,0,5,n)\n",
    "    Etotm=sum(np.array(x)**2)/(2*n)+(2*s**2-sum(np.array(x)**2)/n)/(8*s**4)\n",
    "    Em.append(abs(Etotm-Etot))\n",
    "    n=n*2\n",
    "    nlst.append(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#loglog plot\n",
    "plt.plot(np.log2(nlst),np.log2(Ed), label='direct')\n",
    "plt.plot(np.log2(nlst),np.log2(Em), label='metropolis')\n",
    "\n",
    "plt.xlabel('log n')\n",
    "plt.ylabel('log DE')\n",
    "plt.title('Error on total energy')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "md,qd=lsfit(np.log2(nlst),np.log2(Ed))\n",
    "mm,qm=lsfit(np.log2(nlst),np.log2(Em))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(md,mm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(md,mm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(md,mm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Correlations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(a) Calculate the autocorrelation function C(j) = hxixi+ji hx2i\n",
    "i \n",
    "for a\n",
    "sequence or random numbers distributed according to a gaussian using\n",
    "the Metropolis method, testing di↵erent values of \"/!. Comment\n",
    "the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def autocorrelation(x):\n",
    "    n=len(x)\n",
    "    C=np.empty(n)\n",
    "    for j in range(n):\n",
    "        cx=0\n",
    "        for i in range(0,n):\n",
    "            cx=cx+x[i]*x[(i+j)%n]\n",
    "        cx=cx/n\n",
    "        C[j]=(cx-np.mean(x)**2)/(np.var(x)-np.mean(x)**2)\n",
    "    return C\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=100\n",
    "dvalues=[5,2,1,0.5,0.2,0.1]\n",
    "lst=[]\n",
    "\n",
    "for d in dvalues:\n",
    "    x=metropolis(p,0,d,n)\n",
    "    C=autocorrelation(x)\n",
    "    lst.append(C)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#loglog plot\n",
    "for j in range(len(dvalues)):\n",
    "    plt.plot(range(100),lst[j][0:100],'p', label='d/s=' + str(dvalues[j]))\n",
    "\n",
    "plt.xlabel('n')\n",
    "plt.ylabel('C')\n",
    "plt.title('Autocorrelation function')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=100\n",
    "d=1\n",
    "s=1\n",
    "x=[]\n",
    "#direct\n",
    "for i in range(int(n/2)):\n",
    "    a,b=boxmuller(0,s)\n",
    "    x.append(a)\n",
    "    x.append(b)\n",
    "Cd=autocorrelation(x)\n",
    "#metropolis\n",
    "x=metropolis(p,0,5,n)\n",
    "Cm=autocorrelation(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#loglog plot\n",
    "plt.plot(range(n),Cd,'p', label='direct')\n",
    "plt.plot(range(n),Cm,'p', label='metropolis')\n",
    "\n",
    "\n",
    "plt.xlabel('n')\n",
    "plt.ylabel('C')\n",
    "plt.title('Autocorrelation function')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Verification of the Boltzmann distribution\n",
    "We can verify directly that the Metropolis algorithm yields the Boltzmann\n",
    "distribution. We consider a single classical particle in one dimension\n",
    "in equilibrium with a heath bath (canonical ensemble). We fix therefore\n",
    "the temperature T, which labels a macrostate. The energy E can vary\n",
    "according to the particular microstate (in this particular case, it is enough\n",
    "to label a microstate, a part from the sign of the velocity)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(a) Write a code (see e.g. boltzmann metropolis.f90) to determine\n",
    "the form of the probability distribution P(E) that is generated by\n",
    "the Metropolis algorithm. Let for instance T=1, the initial velocity\n",
    "vinitial=0, the number of Monte Carlo steps nmcs=1000, and the\n",
    "maximum variation of the velocity dvmax=2. Calculate the mean\n",
    "energy, the mean velocity, and the probability density P(E)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def metropolis_bz(b,n):\n",
    "    v=0              #initial microstate\n",
    "    E=0           \n",
    "    \n",
    "    na=0\n",
    "    vlst=[]\n",
    "    Elst=[]\n",
    "    dvmax=10\n",
    "    \n",
    "    for i in range(n):\n",
    "        vlst.append(v)\n",
    "        Elst.append(E)\n",
    "        \n",
    "        dv=dvmax*np.random.uniform(-1,1)       #random variation\n",
    "        vt=v+dv\n",
    "        de= 0.5*(vt**2 - v**2)\n",
    "        if de <= 0:                            #accept\n",
    "            v=vt\n",
    "            na=na+1\n",
    "            E=E+de\n",
    "        else:\n",
    "            rnd=np.random.uniform(0,1)\n",
    "            if np.exp(-b*de)>=rnd:             #accept\n",
    "                v=vt\n",
    "                na=na+1\n",
    "                E=E+de   \n",
    "    return vlst, Elst, na"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=10000\n",
    "b=10\n",
    "vlst, Elst, na = metropolis_bz(b,n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "A = 4/np.sqrt(b)\n",
    "\n",
    "#histogram\n",
    "plt.hist(vlst,range=(-A,A), bins=35, density=True)\n",
    "\n",
    "x=np.linspace(-A,A,100)\n",
    "y=np.sqrt(b/(np.pi*2))*np.exp(-b*x**2/2)\n",
    "plt.plot(x,y)\n",
    "\n",
    "plt.xlabel('v')\n",
    "plt.ylabel('f(v)')\n",
    "plt.title('1D - beta=1')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "#from matplotlib import rc\n",
    "#rc('text', usetex=True) \n",
    "\n",
    "\n",
    "A=4/b\n",
    "#histogram\n",
    "plt.hist(Elst, range=(0,A), bins=35, density=True)\n",
    "\n",
    "x=np.linspace(0,A,100)\n",
    "y=np.sqrt(b/(np.pi*x))*np.exp(-b*x)\n",
    "#y=1.78*np.sqrt(1/(x+0.5))*np.exp(-(x+0.5))\n",
    "\n",
    "plt.plot(x,y)\n",
    "#plt.plot(x,y, label = r'$\\frac{{1.78}\\,  e^{-(E+0.5)}}{\\sqrt{E+0.5}}  $')\n",
    "\n",
    "plt.xlabel('E')\n",
    "plt.ylabel('P(E)')\n",
    "plt.title('1D - beta=1')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "A=4/b\n",
    "#histogram\n",
    "hist, bin_edges =np.histogram(Elst, range=(0,A), bins=35, density=True)\n",
    "x=(bin_edges[1:]+bin_edges[:-1])/2\n",
    "y=np.log(hist)\n",
    "plt.plot(x,y, label='log hist')\n",
    "\n",
    "m,q=lsfit(x[5:30],y[5:30])\n",
    "print('m=', m)\n",
    "xl=np.linspace(0,4,5)\n",
    "yl=m*xl+q\n",
    "plt.plot(xl,yl,label=str(np.round(m,2))+'E' +str(np.round(q,2)))\n",
    "\n",
    "plt.xlabel('E')\n",
    "plt.ylabel('log P(E)')\n",
    "\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vm=np.mean(vlst)\n",
    "ve=np.mean(Elst)\n",
    "print(vm,ve)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(e) Modify the program to simulate an ideal gas of N particles in one\n",
    "dimension. [Hint: modify the subroutine Metropolis inserting a loop\n",
    "over the particles] Consider for instance N=20, T=100, nmcs=200.\n",
    "Assume all particles to have the same initial velocity vinitial=10.\n",
    "Determine the value of dvmax so that the acceptance ratio is about\n",
    "50% ? What are the mean energy hEi (i.e., total energy of the system\n",
    "hEtoti divided by the number of particles) and the mean velocity?\n",
    "[the symbol hi indicates temporal(statistical) averages]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def metropolis_bz_N(b,n,N):\n",
    "    v0=0\n",
    "    \n",
    "    v=np.zeros(N)+v0             #initial microstate\n",
    "    E=0           \n",
    "    \n",
    "    na=0\n",
    "    varr=np.empty((N,n))\n",
    "    Elst=[]\n",
    "    dvmax=0.15\n",
    "    \n",
    "    for i in range(n):\n",
    "        varr[:,i]=v\n",
    "        Elst.append(E/N)\n",
    "        \n",
    "        dv=dvmax*np.random.uniform(-1,1,N)       #random variation\n",
    "        vt=v+dv\n",
    "        de= 0.5*sum(vt**2 - v**2)\n",
    "        if de <= 0:                            #accept\n",
    "            v=vt\n",
    "            na=na+1\n",
    "            E=E+de\n",
    "        else:\n",
    "            rnd=np.random.uniform(0,1)\n",
    "            if np.exp(-b*de)>=rnd:             #accept\n",
    "                v=vt\n",
    "                na=na+1\n",
    "                E=E+de   \n",
    "    return varr, Elst, na"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=10000\n",
    "N=200\n",
    "b=1\n",
    "varr, Elst, na=metropolis_bz_N(b,n,N)\n",
    "\n",
    "vm = np.sum(varr, 1)/N\n",
    "\n",
    "print(na/n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "\n",
    "#histogram\n",
    "plt.hist(vm, bins=15, density=True)\n",
    "\n",
    "\n",
    "plt.xlabel('v')\n",
    "plt.ylabel(r'$\\langle f(v)\\rangle$')\n",
    "plt.title('N='+str(N))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "#from matplotlib import rc\n",
    "#rc('text', usetex=True) \n",
    "\n",
    "m = np.mean(Elst)\n",
    "s = np.sqrt(np.var(Elst, ddof=1))\n",
    "\n",
    "A=4/b\n",
    "#histogram\n",
    "plt.hist(Elst, range=(m-4*s,m+4*s), bins=25, density=True)\n",
    "\n",
    "\n",
    "x=np.linspace(m-4*s,m+4*s,100)\n",
    "y=1/(s*np.sqrt(np.pi*2))*np.exp(-(x-m)**2/(2*s**2))\n",
    "plt.plot(x,y)\n",
    "\n",
    "\n",
    "\n",
    "plt.xlabel('E')\n",
    "plt.ylabel('P(E)')\n",
    "plt.title('N='+str(N))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#histogram\n",
    "plt.hist(Elst, bins=35, density=True)\n",
    "\n",
    "\n",
    "plt.xlabel('E')\n",
    "plt.ylabel('P(E)')\n",
    "plt.title('N='+str(N))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=10000\n",
    "N=200\n",
    "blst=np.array(range(1,101))/20.0\n",
    "m=[]\n",
    "\n",
    "for b in blst:\n",
    "    varr, Elst, na=metropolis_bz_N(b,n,N)\n",
    "    m.append(np.mean(Elst))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "199\n"
     ]
    }
   ],
   "source": [
    "print(len(m))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=[]\n",
    "x=[]\n",
    "for i in range(1,len(blst)):\n",
    "    d=(m[i]-m[i-1])/(blst[i]-blst[i-1])\n",
    "    bm=(blst[i]+blst[i-1])/2\n",
    "    y.append(-d*bm**2)\n",
    "    x.append(bm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#capacity\n",
    "plt.plot(x[:100],y[:100], label=r'$-\\beta^2 \\frac{\\partial \\langle E\\rangle }{\\partial \\beta}$')\n",
    "xc=np.linspace(0,5,5)\n",
    "yc=0.48*np.ones(len(xc))\n",
    "plt.plot(xc,yc, label='0.48')\n",
    "\n",
    "plt.xlabel(r'$\\beta$')\n",
    "plt.ylabel(r'$\\frac{C}{Nk_B}$')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.48220431742927156"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(y[:100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEQCAYAAAC3JB/WAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAPGklEQVR4nO3df4xlZX3H8feHBQpWjFAG3Ap2mpZSKRGsU8SS/iGI2QJlKSlUE+22kmz/sC22JnXV/lFjmqxpazXWpNkouFpqpUXKCqmy3UpNW4vOUrDgohiyKnHLjogFNbFZ+PaPe1an+wMuwzz37szzfiWT82Puued7Avu5zzznOc9NVSFJ6sdR0y5AkjRZBr8kdcbgl6TOGPyS1BmDX5I6Y/BLUmeOnnYB4zj55JNrdnZ22mVI0oqyc+fOb1bVzIH7V0Twz87OMj8/P+0yJGlFSfLVQ+1vGvxJdgOPA08A+6pqLslJwMeAWWA3cHVVPdqyDknSD02ij/+VVXVuVc0N25uAHVV1BrBj2JYkTcg0bu6uB7YO61uBK6ZQgyR1q3XwF3B7kp1JNg77Tq2qPQDD8pTGNUiSFml9c/eCqvpGklOA7UnuH/fA4YNiI8CLXvSiVvVJUneatvir6hvDci9wM3Ae8HCStQDDcu9hjt1SVXNVNTczc9BoJEnSEjUL/iQ/muSE/evAq4F7gW3AhuFlG4BbWtUgSTpYy66eU4Gbk+w/z99U1SeTfB64Mck1wNeAqxrWIEk6QLPgr6oHgXMOsf8R4KJW55UOZ3bTbdMuYWy7N1867RK0ijlXjyR1xuCXpM4Y/JLUGYNfkjpj8EtSZwx+SeqMwS9JnTH4JakzBr8kdcbgl6TOGPyS1BmDX5I6Y/BLUmcMfknqjMEvSZ0x+CWpMwa/JHXG4Jekzhj8ktQZg1+SOmPwS1JnDH5J6ozBL0mdMfglqTMGvyR1xuCXpM4Y/JLUGYNfkjpj8EtSZwx+SeqMwS9JnTH4JakzBr8kdcbgl6TONA/+JGuS/GeSW4ftk5JsT/LAsDyxdQ2SpB+aRIv/WmDXou1NwI6qOgPYMWxLkiakafAnOQ24FPjAot3rga3D+lbgipY1SJL+v9Yt/vcAfwg8uWjfqVW1B2BYnnKoA5NsTDKfZH5hYaFxmZLUj2bBn+QyYG9V7VzK8VW1parmqmpuZmZmmauTpH4d3fC9LwAuT3IJcBzwvCR/DTycZG1V7UmyFtjbsAZJ0gGatfir6q1VdVpVzQKvAf65ql4HbAM2DC/bANzSqgZJ0sGmMY5/M3BxkgeAi4dtSdKEtOzq+YGqugO4Y1h/BLhoEueVJB3MJ3clqTMGvyR1xuCXpM4Y/JLUGYNfkjpj8EtSZwx+SeqMwS9JnTH4JakzBr8kdcbgl6TOGPyS1BmDX5I6Y/BLUmcMfknqjMEvSZ0x+CWpMwa/JHXG4Jekzhj8ktQZg1+SOmPwS1JnDH5J6ozBL0mdMfglqTMGvyR1xuCXpM4Y/JLUGYNfkjpj8EtSZwx+SeqMwS9JnTH4JakzzYI/yXFJPpfkniT3JXnHsP+kJNuTPDAsT2xVgyTpYC1b/N8HLqyqc4BzgXVJzgc2ATuq6gxgx7AtSZqQZsFfI98ZNo8ZfgpYD2wd9m8FrmhVgyTpYE37+JOsSXI3sBfYXlV3AqdW1R6AYXnKYY7dmGQ+yfzCwkLLMiWpK02Dv6qeqKpzgdOA85Kc/QyO3VJVc1U1NzMz06xGSerNREb1VNW3gTuAdcDDSdYCDMu9k6hBkjTSclTPTJLnD+vHA68C7ge2ARuGl20AbmlVgyTpYEc3fO+1wNYkaxh9wNxYVbcm+SxwY5JrgK8BVzWsQZJ0gLGCP8m1wPXA48AHgJcCm6rq9sMdU1VfGF534P5HgIuWVK0k6Vkbt6vnDVX1GPBqYAb4LWBzs6okSc2MG/wZlpcA11fVPYv2SZJWkHGDf2eS2xkF/6eSnAA82a4sSVIr497cvYbRtAsPVtX3kvwYo+4eSdIKM26Lf3tV3TWMx99/g/YvmlUlSWrmKVv8SY4DngOcPMyiub9f/3nAjzeuTZLUwNN19fw28CZGIb+THwb/Y8D725UlSWrlKYO/qt4LvDfJ71bV+yZUkySpobFu7lbV+5L8IjC7+Jiq+nCjuiRJjYz75O5HgJ8C7gaeGHYXYPBL0goz7nDOOeCsqqqWxUiS2ht3OOe9wAtaFiJJmoxxW/wnA19M8jlG36ULQFVd3qQqSVIz4wb/H7csQpI0OeOO6vmX1oVIkiZj3FE9jzMaxQNwLHAM8N2qel6rwiRJbYzb4j9h8XaSK4DzWhSklWN2023TLkHSEizpO3er6h+AC5e3FEnSJIzb1XPlos2jGI3rd0y/JK1A447q+ZVF6/uA3cD6Za9GktTcuH38fumKJK0SY/XxJzktyc1J9iZ5OMlNSU5rXZwkafmNe3P3emAbo3n5Xwh8YtgnSVphxg3+maq6vqr2DT8fAmYa1iVJamTc4P9mktclWTP8vA54pGVhkqQ2xg3+NwBXA/8N7AF+DfCGryStQOMO53wnsKGqHgVIchLwZ4w+ECRJK8i4Lf6X7A99gKr6FvDSNiVJkloaN/iPSnLi/o2hxT/uXwuSpCPIuOH958C/J/l7RlM1XA38SbOqJEnNjPvk7oeTzDOamC3AlVX1xaaVSZKaGLu7Zgh6w16SVrglTcssSVq5mgV/ktOTfDrJriT3Jbl22H9Sku1JHhiWJz7de0mSlk/LFv8+4M1V9WLgfOCNSc4CNgE7quoMYMewLUmakGbBX1V7ququYf1xYBejCd7WA1uHl20FrmhVgyTpYBPp408yy+iBrzuBU6tqD4w+HIBTJlGDJGmkefAneS5wE/CmqnrsGRy3Mcl8kvmFhYV2BUpSZ5oGf5JjGIX+DVX18WH3w0nWDr9fC+w91LFVtaWq5qpqbmbGGaAlabm0HNUT4IPArqp696JfbQM2DOsbgFta1SBJOljL+XYuAF4P/FeSu4d9bwM2AzcmuQb4GnBVwxokSQdoFvxV9a+Mpnc4lItanVeS9NR8cleSOmPwS1JnDH5J6oxfpiLpWZvddNu0Sxjb7s2XTruEqbPFL0mdMfglqTMGvyR1xuCXpM4Y/JLUGYNfkjpj8EtSZwx+SeqMwS9JnTH4JakzBr8kdcbgl6TOOEnbEWYlTXYlaWWyxS9JnTH4JakzBr8kdcY+fukI5L0etWSLX5I6Y/BLUmcMfknqjMEvSZ0x+CWpMwa/JHXG4Jekzhj8ktQZg1+SOmPwS1JnDH5J6ozBL0mdaTZJW5LrgMuAvVV19rDvJOBjwCywG7i6qh5tVYMkHWilTYC3e/Oly/6eLVv8HwLWHbBvE7Cjqs4AdgzbkqQJahb8VfUZ4FsH7F4PbB3WtwJXtDq/JOnQJt3Hf2pV7QEYlqdM+PyS1L0j9uZuko1J5pPMLywsTLscSVo1Jh38DydZCzAs9x7uhVW1parmqmpuZmZmYgVK0mo36eDfBmwY1jcAt0z4/JLUvWbBn+SjwGeBM5M8lOQaYDNwcZIHgIuHbUnSBDUbx19Vrz3Mry5qdU5J0tM7Ym/uSpLaMPglqTMGvyR1plkf/5Fipc3LIUmt2eKXpM4Y/JLUGYNfkjpj8EtSZwx+SeqMwS9JnTH4JakzBr8kdcbgl6TOGPyS1BmDX5I6Y/BLUmcMfknqjMEvSZ0x+CWpMwa/JHXG4Jekzhj8ktQZg1+SOmPwS1JnDH5J6ozBL0mdMfglqTMGvyR1xuCXpM4Y/JLUGYNfkjpj8EtSZwx+SeqMwS9JnZlK8CdZl+RLSb6SZNM0apCkXk08+JOsAd4P/DJwFvDaJGdNug5J6tU0WvznAV+pqger6n+BvwXWT6EOSerS0VM45wuBry/afgh4+YEvSrIR2DhsfifJl5Z4vpOBby7x2JXKa+6D19yBvOtZXfNPHGrnNII/h9hXB+2o2gJsedYnS+arau7Zvs9K4jX3wWvuQ4trnkZXz0PA6Yu2TwO+MYU6JKlL0wj+zwNnJPnJJMcCrwG2TaEOSerSxLt6qmpfkt8BPgWsAa6rqvsanvJZdxetQF5zH7zmPiz7NafqoO51SdIq5pO7ktQZg1+SOtNF8Cf50yT3J/lCkpuTPH/aNbWW5Kok9yV5MsmqHf7W4/QfSa5LsjfJvdOuZRKSnJ7k00l2Df9PXzvtmlpLclySzyW5Z7jmdyzn+3cR/MB24OyqegnwZeCtU65nEu4FrgQ+M+1CWul4+o8PAeumXcQE7QPeXFUvBs4H3tjBf+fvAxdW1TnAucC6JOcv15t3EfxVdXtV7Rs2/4PRswOrWlXtqqqlPu28UnQ5/UdVfQb41rTrmJSq2lNVdw3rjwO7GM0AsGrVyHeGzWOGn2UbidNF8B/gDcA/TrsILYtDTf+xqgOhd0lmgZcCd065lOaSrElyN7AX2F5Vy3bN05iyoYkk/wS84BC/entV3TK85u2M/my8YZK1tTLONa9yY03/odUhyXOBm4A3VdVj066ntap6Ajh3uCd5c5Kzq2pZ7uusmuCvqlc91e+TbAAuAy6qVfLwwtNdcwec/qMTSY5hFPo3VNXHp13PJFXVt5Pcwei+zrIEfxddPUnWAW8BLq+q7027Hi0bp//oQJIAHwR2VdW7p13PJCSZ2T/6MMnxwKuA+5fr/bsIfuAvgROA7UnuTvJX0y6otSS/muQh4BXAbUk+Ne2alttww37/9B+7gBsbT/9xREjyUeCzwJlJHkpyzbRrauwC4PXAhcO/37uTXDLtohpbC3w6yRcYNXC2V9Wty/XmTtkgSZ3ppcUvSRoY/JLUGYNfkjpj8EtSZwx+SeqMwS9JnVk1T+5Kk5bk1xmNMT8K+G5VvWXKJUljMfilJUjyCuDlVfV7w/axUy5JGptdPdLS/Cbwnv0bw7TQ0opg8EtLcxyjmV6BH3wpjLQiOGWDtARJfg74I2CB0TxQv19V355qUdKYDH5J6oxdPZLUGUf1SGNIsqQ/javqUN8SJk2VXT2S1Bm7eqQxJfl6kouH9b/LyHXTrkt6pgx+aQxJTgc+yeh7m2H0Re/HA/+T5JVJ3pXkuKkVKD0DBr80npcBdwDPSfLTwFeBnwfOBc4cpmu4IMk7k3wgif+2dMTy5q40npcBNzBqLP0B8G/ALwB3At8dXnMm8ChwbFU9OY0ipXHYKpHG8zPAl4FPAL8B3AWcBbwN+NkkvwT8SFW9m0VP9EpHIkf1SMskyYcZfSB8r6q2TLse6XAMfknqjF09ktQZg1+SOmPwS1JnDH5J6ozBL0mdMfglqTMGvyR1xuCXpM4Y/JLUmf8DQvKoWp4R69oAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#capacity\n",
    "plt.hist(y, range=(-2,3), bins= 7)\n",
    "\n",
    "\n",
    "plt.xlabel(r'$\\frac{C}{Nk_B}$')\n",
    "plt.ylabel('counts')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=10000\n",
    "N=200\n",
    "b=1\n",
    "varr, Elst, na=metropolis_bz_N(b,n,N)\n",
    "s21=np.var(Elst,ddof=1)\n",
    "C1=s21*b**2\n",
    "varr, Elst, na=metropolis_bz_N(b,n,N)\n",
    "b=0.01\n",
    "s201=np.var(Elst,ddof=1)\n",
    "C01=s201*b**2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.004125131497088244 5.612014525448624e-07\n"
     ]
    }
   ],
   "source": [
    "print(C1,C01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "96.0 165.00525988352973\n"
     ]
    }
   ],
   "source": [
    "k=1.4 *10**(-23)\n",
    "print(0.48*N, C1*N**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
